// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: trains.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrainServiceClient is the client API for TrainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainServiceClient interface {
	AddTrain(ctx context.Context, in *AddTrainReq, opts ...grpc.CallOption) (*AddTrainResp, error)
	Update(ctx context.Context, in *UpdateTrainReq, opts ...grpc.CallOption) (*UpdateTrainResp, error)
	GetTrainDetail(ctx context.Context, in *GetTrainDetailReq, opts ...grpc.CallOption) (*GetTrainDetailResp, error)
	DelTrain(ctx context.Context, in *DelTrainReq, opts ...grpc.CallOption) (*DelTrainResp, error)
}

type trainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainServiceClient(cc grpc.ClientConnInterface) TrainServiceClient {
	return &trainServiceClient{cc}
}

func (c *trainServiceClient) AddTrain(ctx context.Context, in *AddTrainReq, opts ...grpc.CallOption) (*AddTrainResp, error) {
	out := new(AddTrainResp)
	err := c.cc.Invoke(ctx, "/TrainService/AddTrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainServiceClient) Update(ctx context.Context, in *UpdateTrainReq, opts ...grpc.CallOption) (*UpdateTrainResp, error) {
	out := new(UpdateTrainResp)
	err := c.cc.Invoke(ctx, "/TrainService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainServiceClient) GetTrainDetail(ctx context.Context, in *GetTrainDetailReq, opts ...grpc.CallOption) (*GetTrainDetailResp, error) {
	out := new(GetTrainDetailResp)
	err := c.cc.Invoke(ctx, "/TrainService/GetTrainDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainServiceClient) DelTrain(ctx context.Context, in *DelTrainReq, opts ...grpc.CallOption) (*DelTrainResp, error) {
	out := new(DelTrainResp)
	err := c.cc.Invoke(ctx, "/TrainService/DelTrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainServiceServer is the server API for TrainService service.
// All implementations must embed UnimplementedTrainServiceServer
// for forward compatibility
type TrainServiceServer interface {
	AddTrain(context.Context, *AddTrainReq) (*AddTrainResp, error)
	Update(context.Context, *UpdateTrainReq) (*UpdateTrainResp, error)
	GetTrainDetail(context.Context, *GetTrainDetailReq) (*GetTrainDetailResp, error)
	DelTrain(context.Context, *DelTrainReq) (*DelTrainResp, error)
	mustEmbedUnimplementedTrainServiceServer()
}

// UnimplementedTrainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrainServiceServer struct {
}

func (UnimplementedTrainServiceServer) AddTrain(context.Context, *AddTrainReq) (*AddTrainResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrain not implemented")
}
func (UnimplementedTrainServiceServer) Update(context.Context, *UpdateTrainReq) (*UpdateTrainResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTrainServiceServer) GetTrainDetail(context.Context, *GetTrainDetailReq) (*GetTrainDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainDetail not implemented")
}
func (UnimplementedTrainServiceServer) DelTrain(context.Context, *DelTrainReq) (*DelTrainResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTrain not implemented")
}
func (UnimplementedTrainServiceServer) mustEmbedUnimplementedTrainServiceServer() {}

// UnsafeTrainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainServiceServer will
// result in compilation errors.
type UnsafeTrainServiceServer interface {
	mustEmbedUnimplementedTrainServiceServer()
}

func RegisterTrainServiceServer(s grpc.ServiceRegistrar, srv TrainServiceServer) {
	s.RegisterService(&TrainService_ServiceDesc, srv)
}

func _TrainService_AddTrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServiceServer).AddTrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrainService/AddTrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServiceServer).AddTrain(ctx, req.(*AddTrainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrainService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServiceServer).Update(ctx, req.(*UpdateTrainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainService_GetTrainDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServiceServer).GetTrainDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrainService/GetTrainDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServiceServer).GetTrainDetail(ctx, req.(*GetTrainDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainService_DelTrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTrainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServiceServer).DelTrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrainService/DelTrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServiceServer).DelTrain(ctx, req.(*DelTrainReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainService_ServiceDesc is the grpc.ServiceDesc for TrainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TrainService",
	HandlerType: (*TrainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTrain",
			Handler:    _TrainService_AddTrain_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TrainService_Update_Handler,
		},
		{
			MethodName: "GetTrainDetail",
			Handler:    _TrainService_GetTrainDetail_Handler,
		},
		{
			MethodName: "DelTrain",
			Handler:    _TrainService_DelTrain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trains.proto",
}
