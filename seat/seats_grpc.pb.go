// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: seats.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeatServiceClient is the client API for SeatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeatServiceClient interface {
	AddSeat(ctx context.Context, in *AddSeatReq, opts ...grpc.CallOption) (*AddSeatResp, error)
	DelSeat(ctx context.Context, in *DelSeatReq, opts ...grpc.CallOption) (*DelSeatResp, error)
	UpdateSeat(ctx context.Context, in *UpdateSeatReq, opts ...grpc.CallOption) (*UpdateSeatResp, error)
	GetSeatDetail(ctx context.Context, in *GetSeatDetailReq, opts ...grpc.CallOption) (*GetSeatDetailResp, error)
}

type seatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeatServiceClient(cc grpc.ClientConnInterface) SeatServiceClient {
	return &seatServiceClient{cc}
}

func (c *seatServiceClient) AddSeat(ctx context.Context, in *AddSeatReq, opts ...grpc.CallOption) (*AddSeatResp, error) {
	out := new(AddSeatResp)
	err := c.cc.Invoke(ctx, "/SeatService/AddSeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatServiceClient) DelSeat(ctx context.Context, in *DelSeatReq, opts ...grpc.CallOption) (*DelSeatResp, error) {
	out := new(DelSeatResp)
	err := c.cc.Invoke(ctx, "/SeatService/DelSeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatServiceClient) UpdateSeat(ctx context.Context, in *UpdateSeatReq, opts ...grpc.CallOption) (*UpdateSeatResp, error) {
	out := new(UpdateSeatResp)
	err := c.cc.Invoke(ctx, "/SeatService/UpdateSeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatServiceClient) GetSeatDetail(ctx context.Context, in *GetSeatDetailReq, opts ...grpc.CallOption) (*GetSeatDetailResp, error) {
	out := new(GetSeatDetailResp)
	err := c.cc.Invoke(ctx, "/SeatService/GetSeatDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeatServiceServer is the server API for SeatService service.
// All implementations must embed UnimplementedSeatServiceServer
// for forward compatibility
type SeatServiceServer interface {
	AddSeat(context.Context, *AddSeatReq) (*AddSeatResp, error)
	DelSeat(context.Context, *DelSeatReq) (*DelSeatResp, error)
	UpdateSeat(context.Context, *UpdateSeatReq) (*UpdateSeatResp, error)
	GetSeatDetail(context.Context, *GetSeatDetailReq) (*GetSeatDetailResp, error)
	mustEmbedUnimplementedSeatServiceServer()
}

// UnimplementedSeatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeatServiceServer struct {
}

func (UnimplementedSeatServiceServer) AddSeat(context.Context, *AddSeatReq) (*AddSeatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSeat not implemented")
}
func (UnimplementedSeatServiceServer) DelSeat(context.Context, *DelSeatReq) (*DelSeatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSeat not implemented")
}
func (UnimplementedSeatServiceServer) UpdateSeat(context.Context, *UpdateSeatReq) (*UpdateSeatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeat not implemented")
}
func (UnimplementedSeatServiceServer) GetSeatDetail(context.Context, *GetSeatDetailReq) (*GetSeatDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeatDetail not implemented")
}
func (UnimplementedSeatServiceServer) mustEmbedUnimplementedSeatServiceServer() {}

// UnsafeSeatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeatServiceServer will
// result in compilation errors.
type UnsafeSeatServiceServer interface {
	mustEmbedUnimplementedSeatServiceServer()
}

func RegisterSeatServiceServer(s grpc.ServiceRegistrar, srv SeatServiceServer) {
	s.RegisterService(&SeatService_ServiceDesc, srv)
}

func _SeatService_AddSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServiceServer).AddSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeatService/AddSeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServiceServer).AddSeat(ctx, req.(*AddSeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatService_DelSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServiceServer).DelSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeatService/DelSeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServiceServer).DelSeat(ctx, req.(*DelSeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatService_UpdateSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServiceServer).UpdateSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeatService/UpdateSeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServiceServer).UpdateSeat(ctx, req.(*UpdateSeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatService_GetSeatDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeatDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServiceServer).GetSeatDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeatService/GetSeatDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServiceServer).GetSeatDetail(ctx, req.(*GetSeatDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SeatService_ServiceDesc is the grpc.ServiceDesc for SeatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SeatService",
	HandlerType: (*SeatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSeat",
			Handler:    _SeatService_AddSeat_Handler,
		},
		{
			MethodName: "DelSeat",
			Handler:    _SeatService_DelSeat_Handler,
		},
		{
			MethodName: "UpdateSeat",
			Handler:    _SeatService_UpdateSeat_Handler,
		},
		{
			MethodName: "GetSeatDetail",
			Handler:    _SeatService_GetSeatDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seats.proto",
}
