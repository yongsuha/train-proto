// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: tickets.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketServiceClient is the client API for TicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketServiceClient interface {
	AddTicket(ctx context.Context, in *AddTicketReq, opts ...grpc.CallOption) (*AddTicketResp, error)
	DelTicket(ctx context.Context, in *DelTicketReq, opts ...grpc.CallOption) (*DelTicketResp, error)
	GetTicketDetail(ctx context.Context, in *GetTicketDetailReq, opts ...grpc.CallOption) (*GetTicketDetailResp, error)
	UpdateTicket(ctx context.Context, in *UpdateTicketReq, opts ...grpc.CallOption) (*UpdateTicketResp, error)
}

type ticketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketServiceClient(cc grpc.ClientConnInterface) TicketServiceClient {
	return &ticketServiceClient{cc}
}

func (c *ticketServiceClient) AddTicket(ctx context.Context, in *AddTicketReq, opts ...grpc.CallOption) (*AddTicketResp, error) {
	out := new(AddTicketResp)
	err := c.cc.Invoke(ctx, "/TicketService/AddTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) DelTicket(ctx context.Context, in *DelTicketReq, opts ...grpc.CallOption) (*DelTicketResp, error) {
	out := new(DelTicketResp)
	err := c.cc.Invoke(ctx, "/TicketService/DelTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetTicketDetail(ctx context.Context, in *GetTicketDetailReq, opts ...grpc.CallOption) (*GetTicketDetailResp, error) {
	out := new(GetTicketDetailResp)
	err := c.cc.Invoke(ctx, "/TicketService/GetTicketDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) UpdateTicket(ctx context.Context, in *UpdateTicketReq, opts ...grpc.CallOption) (*UpdateTicketResp, error) {
	out := new(UpdateTicketResp)
	err := c.cc.Invoke(ctx, "/TicketService/UpdateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketServiceServer is the server API for TicketService service.
// All implementations must embed UnimplementedTicketServiceServer
// for forward compatibility
type TicketServiceServer interface {
	AddTicket(context.Context, *AddTicketReq) (*AddTicketResp, error)
	DelTicket(context.Context, *DelTicketReq) (*DelTicketResp, error)
	GetTicketDetail(context.Context, *GetTicketDetailReq) (*GetTicketDetailResp, error)
	UpdateTicket(context.Context, *UpdateTicketReq) (*UpdateTicketResp, error)
	mustEmbedUnimplementedTicketServiceServer()
}

// UnimplementedTicketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicketServiceServer struct {
}

func (UnimplementedTicketServiceServer) AddTicket(context.Context, *AddTicketReq) (*AddTicketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTicket not implemented")
}
func (UnimplementedTicketServiceServer) DelTicket(context.Context, *DelTicketReq) (*DelTicketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTicket not implemented")
}
func (UnimplementedTicketServiceServer) GetTicketDetail(context.Context, *GetTicketDetailReq) (*GetTicketDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketDetail not implemented")
}
func (UnimplementedTicketServiceServer) UpdateTicket(context.Context, *UpdateTicketReq) (*UpdateTicketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicket not implemented")
}
func (UnimplementedTicketServiceServer) mustEmbedUnimplementedTicketServiceServer() {}

// UnsafeTicketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketServiceServer will
// result in compilation errors.
type UnsafeTicketServiceServer interface {
	mustEmbedUnimplementedTicketServiceServer()
}

func RegisterTicketServiceServer(s grpc.ServiceRegistrar, srv TicketServiceServer) {
	s.RegisterService(&TicketService_ServiceDesc, srv)
}

func _TicketService_AddTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).AddTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TicketService/AddTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).AddTicket(ctx, req.(*AddTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_DelTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).DelTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TicketService/DelTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).DelTicket(ctx, req.(*DelTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetTicketDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetTicketDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TicketService/GetTicketDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetTicketDetail(ctx, req.(*GetTicketDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_UpdateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).UpdateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TicketService/UpdateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).UpdateTicket(ctx, req.(*UpdateTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketService_ServiceDesc is the grpc.ServiceDesc for TicketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TicketService",
	HandlerType: (*TicketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTicket",
			Handler:    _TicketService_AddTicket_Handler,
		},
		{
			MethodName: "DelTicket",
			Handler:    _TicketService_DelTicket_Handler,
		},
		{
			MethodName: "GetTicketDetail",
			Handler:    _TicketService_GetTicketDetail_Handler,
		},
		{
			MethodName: "UpdateTicket",
			Handler:    _TicketService_UpdateTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tickets.proto",
}
