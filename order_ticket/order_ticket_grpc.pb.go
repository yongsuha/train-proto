// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: order_ticket.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderTicketServiceClient is the client API for OrderTicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderTicketServiceClient interface {
	AddOrderTicket(ctx context.Context, in *AddOrderTicketReq, opts ...grpc.CallOption) (*AddOrderTicketResp, error)
	DelOrderTicket(ctx context.Context, in *DelOrderTicketReq, opts ...grpc.CallOption) (*DelOrderTicketResp, error)
	GetOTDetail(ctx context.Context, in *GetOTDetailReq, opts ...grpc.CallOption) (*GetOTDetailResp, error)
}

type orderTicketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderTicketServiceClient(cc grpc.ClientConnInterface) OrderTicketServiceClient {
	return &orderTicketServiceClient{cc}
}

func (c *orderTicketServiceClient) AddOrderTicket(ctx context.Context, in *AddOrderTicketReq, opts ...grpc.CallOption) (*AddOrderTicketResp, error) {
	out := new(AddOrderTicketResp)
	err := c.cc.Invoke(ctx, "/OrderTicketService/AddOrderTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderTicketServiceClient) DelOrderTicket(ctx context.Context, in *DelOrderTicketReq, opts ...grpc.CallOption) (*DelOrderTicketResp, error) {
	out := new(DelOrderTicketResp)
	err := c.cc.Invoke(ctx, "/OrderTicketService/DelOrderTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderTicketServiceClient) GetOTDetail(ctx context.Context, in *GetOTDetailReq, opts ...grpc.CallOption) (*GetOTDetailResp, error) {
	out := new(GetOTDetailResp)
	err := c.cc.Invoke(ctx, "/OrderTicketService/GetOTDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderTicketServiceServer is the server API for OrderTicketService service.
// All implementations must embed UnimplementedOrderTicketServiceServer
// for forward compatibility
type OrderTicketServiceServer interface {
	AddOrderTicket(context.Context, *AddOrderTicketReq) (*AddOrderTicketResp, error)
	DelOrderTicket(context.Context, *DelOrderTicketReq) (*DelOrderTicketResp, error)
	GetOTDetail(context.Context, *GetOTDetailReq) (*GetOTDetailResp, error)
	mustEmbedUnimplementedOrderTicketServiceServer()
}

// UnimplementedOrderTicketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderTicketServiceServer struct {
}

func (UnimplementedOrderTicketServiceServer) AddOrderTicket(context.Context, *AddOrderTicketReq) (*AddOrderTicketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderTicket not implemented")
}
func (UnimplementedOrderTicketServiceServer) DelOrderTicket(context.Context, *DelOrderTicketReq) (*DelOrderTicketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOrderTicket not implemented")
}
func (UnimplementedOrderTicketServiceServer) GetOTDetail(context.Context, *GetOTDetailReq) (*GetOTDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOTDetail not implemented")
}
func (UnimplementedOrderTicketServiceServer) mustEmbedUnimplementedOrderTicketServiceServer() {}

// UnsafeOrderTicketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderTicketServiceServer will
// result in compilation errors.
type UnsafeOrderTicketServiceServer interface {
	mustEmbedUnimplementedOrderTicketServiceServer()
}

func RegisterOrderTicketServiceServer(s grpc.ServiceRegistrar, srv OrderTicketServiceServer) {
	s.RegisterService(&OrderTicketService_ServiceDesc, srv)
}

func _OrderTicketService_AddOrderTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderTicketServiceServer).AddOrderTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderTicketService/AddOrderTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderTicketServiceServer).AddOrderTicket(ctx, req.(*AddOrderTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderTicketService_DelOrderTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOrderTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderTicketServiceServer).DelOrderTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderTicketService/DelOrderTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderTicketServiceServer).DelOrderTicket(ctx, req.(*DelOrderTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderTicketService_GetOTDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOTDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderTicketServiceServer).GetOTDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderTicketService/GetOTDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderTicketServiceServer).GetOTDetail(ctx, req.(*GetOTDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderTicketService_ServiceDesc is the grpc.ServiceDesc for OrderTicketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderTicketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrderTicketService",
	HandlerType: (*OrderTicketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrderTicket",
			Handler:    _OrderTicketService_AddOrderTicket_Handler,
		},
		{
			MethodName: "DelOrderTicket",
			Handler:    _OrderTicketService_DelOrderTicket_Handler,
		},
		{
			MethodName: "GetOTDetail",
			Handler:    _OrderTicketService_GetOTDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_ticket.proto",
}
